import React, { useState, useEffect } from 'react'
import ReactMarkdown from 'react-markdown'
import { ExternalLink, AlertCircle } from 'lucide-react'
import './MarkdownViewer.css'

function MarkdownViewer({ file }) {
  const [content, setContent] = useState('')
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    // Since this is a static site, we'll need to copy brain files to public folder
    // For now, we'll use sample content
    const loadContent = async () => {
      try {
        setLoading(true)

        // Try to fetch from public folder
        const response = await fetch(`/brain/${file}`)
        if (response.ok) {
          const text = await response.text()
          setContent(text)
        } else {
          // Fallback to sample content
          setContent(getSampleContent(file))
        }
      } catch (err) {
        setContent(getSampleContent(file))
      } finally {
        setLoading(false)
      }
    }

    loadContent()
  }, [file])

  const getSampleContent = (filename) => {
    const samples = {
      'SCOPE.md': `# üìã Airbnb Revenue WebApp - SCOPE DEFINITION

> **Domain**: PMS | **Status**: Production Ready | **Version**: 1.0.0

---

## üéØ **PROJECT GOALS**

### **Primary Goals**
- [ ] **Revenue Management System**: Qu·∫£n l√Ω doanh thu t·ª´ booking Airbnb v·ªõi b√°o c√°o theo th√°ng
- [ ] **CSV Data Processing**: Upload v√† x·ª≠ l√Ω file reservations.csv t·ª´ Airbnb v·ªõi normalization t·ª± ƒë·ªông  
- [ ] **Property & Booking Tracking**: Theo d√µi properties, bookings, v√† t√≠nh to√°n ADR (Average Daily Rate)

### **Success Criteria**
- **Performance**: Upload CSV < 30 gi√¢y, reports load < 5 gi√¢y
- **Functionality**: Vietnamese/English CSV headers ƒë∆∞·ª£c parse ƒë√∫ng 100%
- **Quality**: Zero data loss trong qu√° tr√¨nh normalization, ADR calculation ch√≠nh x√°c

---

## ‚ùå **NON-GOALS**

- ‚ùå **Multi-platform Integration**: Ch·ªâ Airbnb, kh√¥ng Booking.com/Expedia
- ‚ùå **Advanced Analytics**: Ch∆∞a c√≥ ML, predictive forecasting  
- ‚ùå **Multi-currency**: Ch·ªâ VND

---

## üîß **TECHNICAL SCOPE**

**Tech Stack**: FastAPI + SQLAlchemy + Jinja2 + SQLite
**Key Features**: Vietnamese CSV headers, VND processing, ADR calculation`,

      'SESSION_CONTEXT.md': `# üß† SESSION CONTEXT - Airbnb Revenue WebApp

> **Domain**: PMS | **Status**: Production Ready (75%) | **Version**: 1.0.0

---

## üìã **D·ª∞ √ÅN & M·ª§C TI√äU**

**D·ª± √°n**: FastAPI-based web application ƒë·ªÉ qu·∫£n l√Ω booking v√† doanh thu t·ª´ Airbnb
**Domain**: Property Management System (PMS)

### **üéØ Core Goals**  
- Revenue Management v·ªõi b√°o c√°o theo th√°ng
- CSV Processing Vietnamese/English headers
- Property Tracking v·ªõi ADR calculation

---

## üì¶ **TECH STACK**

\`\`\`
Backend: FastAPI + SQLAlchemy + Uvicorn
Frontend: Jinja2 Templates + Bootstrap 5  
Database: SQLite + Alembic migrations
CSV Processing: Pandas + Custom header mapping
\`\`\`

---

## üõ† **CURRENT TASKS**

**In Progress**: Database Migration Schema Updates (60%)
**Todo**: Enhanced Vietnamese CSV Support`,

      'DOMAIN_MAP.md': `# üó∫Ô∏è Airbnb Revenue WebApp - DOMAIN MAP

## üèóÔ∏è **CORE ENTITIES**

### **Booking** (Primary Entity)
- reservation_id, property_id, checkin_date, checkout_date
- total_amount, nights, adr_per_night
- Relations: belongs_to Property, Salesperson

### **Property** (Secondary)  
- building_code, unit_number, property_name
- Relations: has_many Bookings

### **Salesperson** (Supporting)
- salesperson_name, contact_info
- Relations: has_many Bookings

---

## üîÑ **KEY WORKFLOWS**

### **CSV Upload Flow**
1. User uploads reservations.csv
2. utils.py parses Vietnamese/English headers  
3. Data normalization (VND, dates, building codes)
4. Upsert to SQLite database
5. Generate success report

### **Revenue Reporting**
1. Query bookings by date range
2. Calculate ADR (prorated by nights)
3. Group by month/property
4. Render Jinja2 template with charts`,

      'default': `# üìÑ ${filename}

ƒê√¢y l√† n·ªôi dung m·∫´u cho file **${filename}**.

ƒê·ªÉ hi·ªÉn th·ªã n·ªôi dung th·ª±c t·∫ø, b·∫°n c·∫ßn:
1. Copy c√°c file t·ª´ \`.brain/\` v√†o \`public/brain/\`  
2. Build v√† deploy static site
3. Files s·∫Ω ƒë∆∞·ª£c load t·ª´ server

---

## üìÅ C·∫•u tr√∫c files brain

- **SCOPE.md**: Project scope definition
- **SESSION_CONTEXT.md**: Quick context loading  
- **ACTIVE_TASKS.json**: Current tasks tracking
- **DOMAIN_MAP.md**: Domain entities mapping
- **PLAYBOOKS/**: Development guidelines`
    }

    return samples[filename] || samples['default']
  }

  const getGitHubLink = () => {
    const baseUrl = 'https://github.com/your-org/airbnb-webapp/blob/main/.brain'
    return `${baseUrl}/${file}`
  }

  if (loading) {
    return <div className="loading">ƒêang t·∫£i n·ªôi dung...</div>
  }

  if (error) {
    return (
      <div className="error">
        <AlertCircle size={24} />
        <p>Kh√¥ng th·ªÉ t·∫£i file {file}</p>
        <p>{error}</p>
      </div>
    )
  }

  return (
    <div className="markdown-viewer">
      <div className="viewer-header">
        <h1>{file}</h1>
        <a
          href={getGitHubLink()}
          target="_blank"
          rel="noopener noreferrer"
          className="external-link"
        >
          <ExternalLink size={16} />
          Xem file g·ªëc
        </a>
      </div>

      <div className="markdown-content">
        <ReactMarkdown>{content}</ReactMarkdown>
      </div>
    </div>
  )
}

export default MarkdownViewer