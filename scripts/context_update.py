#!/usr/bin/env python3
"""
AI Context Update Script
Automatically update project context for AI continuity
"""

import os
import subprocess
from datetime import datetime
from pathlib import Path


def count_lines(file_path):
    """Count lines in a file."""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return len(f.readlines())
    except:
        return 0


def get_last_commit():
    """Get last git commit info."""
    try:
        result = subprocess.run(
            ["git", "log", "-1", "--pretty=format:%h %s"],
            capture_output=True,
            text=True,
        )
        return result.stdout.strip()
    except:
        return "No git info"


def check_imports():
    """Check if main modules import successfully."""
    try:
        subprocess.run(
            ["python", "-c", "from main import app"], check=True, capture_output=True
        )
        return "‚úÖ Working"
    except:
        return "‚ùå Broken"


def update_project_state():
    """Update PROJECT_STATE.md with current metrics."""
    main_lines = count_lines("main.py")
    models_lines = count_lines("models.py")
    import_status = check_imports()
    last_commit = get_last_commit()

    state_content = f"""# üîÑ CURRENT PROJECT STATE
*Auto-updated: {datetime.now().strftime("%Y-%m-%d %H:%M")}*

## üìä LIVE METRICS
- **main.py**: {main_lines} lines {"‚ùå" if main_lines > 800 else "‚úÖ"}
- **models.py**: {models_lines} lines {"‚ùå" if models_lines > 300 else "‚úÖ"}
- **Import Status**: {import_status}
- **Last Commit**: {last_commit}

## üéØ CURRENT FOCUS
Based on file sizes and structure:
{"- üî• URGENT: main.py refactoring needed" if main_lines > 1000 else "- ‚úÖ File sizes healthy"}

## üìÅ FILE STRUCTURE STATUS
"""

    # Check if new structure exists
    if os.path.exists("services"):
        state_content += "- ‚úÖ services/ folder created\n"
    else:
        state_content += "- ‚ùå services/ folder missing\n"

    if os.path.exists("core"):
        state_content += "- ‚úÖ core/ folder created\n"
    else:
        state_content += "- ‚ùå core/ folder missing\n"

    state_content += f"""
## üöÄ IMMEDIATE PRIORITIES
1. {"Service extraction" if main_lines > 1000 else "Continue feature development"}
2. {"Folder restructuring" if not os.path.exists("services") else "Code organization"}
3. UX improvements

*Auto-generated by scripts/context_update.py*
"""

    # Write to PROJECT_STATE.md
    os.makedirs(".context", exist_ok=True)
    with open(".context/PROJECT_STATE.md", "w", encoding="utf-8") as f:
        f.write(state_content)

    print(f"‚úÖ Updated PROJECT_STATE.md - main.py: {main_lines} lines")


def update_daily_log():
    """Add entry to daily log."""
    today = datetime.now().strftime("%Y-%m-%d")
    timestamp = datetime.now().strftime("%H:%M")

    log_entry = f"""
## {today} - Context Update ({timestamp})
**Auto-update**: Context files refreshed
- main.py: {count_lines("main.py")} lines
- Import status: {check_imports()}
- Last commit: {get_last_commit()}

"""

    # Append to daily log
    log_file = Path(".context/DAILY_LOG.md")
    if log_file.exists():
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(log_entry)

    print(f"‚úÖ Updated DAILY_LOG.md entry for {today}")


def health_check():
    """Run quick health check."""
    print("üè• SYSTEM HEALTH CHECK")

    # Check file imports
    try:
        subprocess.run(
            ["python", "-c", "from main import app"], check=True, capture_output=True
        )
        print("‚úÖ main.py imports successfully")
    except:
        print("‚ùå main.py import failed")

    # Check server startup capability
    try:
        # This is a quick syntax check, not actual server start
        subprocess.run(
            ["python", "-c", 'import main; print("Syntax OK")'],
            check=True,
            capture_output=True,
            timeout=5,
        )
        print("‚úÖ Server syntax check passed")
    except:
        print("‚ùå Server syntax issues detected")

    # Check database file
    if os.path.exists("app.db"):
        print("‚úÖ Database file exists")
    else:
        print("‚ùå Database file missing")

    # Check critical files
    critical_files = ["main.py", "models.py", "utils.py", "db.py"]
    for file in critical_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} exists")
        else:
            print(f"‚ùå {file} missing")


def main():
    """Main context update function."""
    print("üîÑ Updating AI Context...")

    # Create context directory if it doesn't exist
    os.makedirs(".context", exist_ok=True)

    # Run updates
    update_project_state()
    update_daily_log()
    health_check()

    print("‚úÖ Context update complete!")
    print("üìñ Next AI can read .context/PROJECT_STATE.md for current status")


if __name__ == "__main__":
    main()
