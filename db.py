"""
C·∫•u h√¨nh Database cho Airbnb WebApp
H·ªó tr·ª£ SQLite (development) v√† PostgreSQL (production)
Bao g·ªìm connection pooling v√† c·∫•u h√¨nh t·ªëi ∆∞u hi·ªáu su·∫•t
"""

import os
from contextlib import contextmanager

from dotenv import load_dotenv
from sqlalchemy.pool import QueuePool
from sqlalchemy import text
from sqlmodel import Session, SQLModel, create_engine

load_dotenv()

# C·∫•u h√¨nh Database t·ª´ environment
DATABASE_URL = os.getenv("DATABASE_URL", "").strip()
PRODUCTION = os.getenv("PRODUCTION", "false").lower() == "true"

# C·∫•u h√¨nh Connection Pool cho Production
POOL_SIZE = int(os.getenv("DB_POOL_SIZE", "10"))
MAX_OVERFLOW = int(os.getenv("DB_MAX_OVERFLOW", "20"))
POOL_TIMEOUT = int(os.getenv("DB_POOL_TIMEOUT", "30"))
POOL_RECYCLE = int(os.getenv("DB_POOL_RECYCLE", "3600"))  # 1 gi·ªù


def create_database_engine():
    """T·∫°o database engine v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u v√† fallback an to√†n"""
    if DATABASE_URL:
        # Production PostgreSQL v·ªõi connection pooling
        if DATABASE_URL.startswith("postgresql"):
            try:
                print("üóÑÔ∏è ƒêang th·ª≠ k·∫øt n·ªëi PostgreSQL Production...")
                engine = create_engine(
                    DATABASE_URL,
                    pool_pre_ping=True,  # Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi s·ª≠ d·ª•ng
                    poolclass=QueuePool,
                    pool_size=POOL_SIZE,
                    max_overflow=MAX_OVERFLOW,
                    pool_timeout=POOL_TIMEOUT,
                    pool_recycle=POOL_RECYCLE,
                    echo=not PRODUCTION,  # Log SQL queries trong development
                    future=True,
                )
                # Test connection immediately
                with engine.connect() as conn:
                    conn.execute(text("SELECT 1"))
                print(
                    f"‚úÖ PostgreSQL k·∫øt n·ªëi th√†nh c√¥ng (Pool: {POOL_SIZE}, Max: {POOL_SIZE + MAX_OVERFLOW})"
                )
                return engine
            except Exception as e:
                print(f"‚ùå PostgreSQL th·∫•t b·∫°i: {e}")
                print("üîÑ Fallback v·ªÅ SQLite ƒë·ªÉ ·ª©ng d·ª•ng c√≥ th·ªÉ ch·∫°y...")
                # Fallback to SQLite in production if PostgreSQL fails
                engine = create_engine(
                    "sqlite:///app_fallback.db",
                    connect_args={"check_same_thread": False},
                    echo=not PRODUCTION,
                    future=True,
                )
                print("‚úÖ SQLite Fallback Database ƒë√£ s·∫µn s√†ng")
                return engine
        else:
            # C√°c database kh√°c
            engine = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
            print(f"‚úÖ Database Engine ƒë√£ s·∫µn s√†ng: {DATABASE_URL.split('://')[0]}")
    else:
        # Development SQLite
        print("üóÑÔ∏è S·ª≠ d·ª•ng SQLite cho Development...")
        engine = create_engine(
            "sqlite:///app.db",
            connect_args={"check_same_thread": False},
            echo=not PRODUCTION,
            future=True,
        )
        print("‚úÖ SQLite Development Database ƒë√£ s·∫µn s√†ng")

    return engine


# T·∫°o engine v·ªõi c·∫•u h√¨nh production
engine = create_database_engine()


def init_db():
    """Kh·ªüi t·∫°o database v√† t·∫°o t·∫•t c·∫£ tables"""
    try:
        print("üóÑÔ∏è ƒêang kh·ªüi t·∫°o database schema...")
        SQLModel.metadata.create_all(engine)
        print("‚úÖ Database schema ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")

        # Ki·ªÉm tra k·∫øt n·ªëi database
        with Session(engine) as session:
            # Test query ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi ho·∫°t ƒë·ªông
            result = session.execute(text("SELECT 1")).fetchone()
            if result:
                print("‚úÖ K·∫øt n·ªëi database ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n")

    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o database: {e}")
        raise e


def get_session():
    """FastAPI dependency ƒë·ªÉ l·∫•y database session"""
    with Session(engine) as session:
        try:
            yield session
        except Exception as e:
            session.rollback()
            print(f"‚ùå L·ªói database session: {e}")
            raise e
        finally:
            session.close()


@contextmanager
def get_session_context():
    """Context manager ƒë·ªÉ x·ª≠ l√Ω session th·ªß c√¥ng v·ªõi error handling"""
    with Session(engine) as session:
        try:
            yield session
        except Exception as e:
            session.rollback()
            print(f"‚ùå L·ªói database context: {e}")
            raise e
        finally:
            session.close()


def check_database_health():
    """Ki·ªÉm tra s·ª©c kh·ªèe database connection"""
    try:
        with Session(engine) as session:
            session.execute(text("SELECT 1")).fetchone()
            return {"status": "healthy", "message": "Database k·∫øt n·ªëi th√†nh c√¥ng"}
    except Exception as e:
        return {"status": "unhealthy", "message": f"Database l·ªói k·∫øt n·ªëi: {str(e)}"}


def get_database_info():
    """L·∫•y th√¥ng tin database hi·ªán t·∫°i"""
    database_type = "SQLite"
    if DATABASE_URL:
        if DATABASE_URL.startswith("postgresql"):
            database_type = "PostgreSQL"
        elif DATABASE_URL.startswith("mysql"):
            database_type = "MySQL"
        elif DATABASE_URL.startswith("sqlite"):
            database_type = "SQLite"

    return {
        "type": database_type,
        "url": DATABASE_URL if DATABASE_URL else "sqlite:///app.db",
        "production": PRODUCTION,
        "pool_size": POOL_SIZE
        if DATABASE_URL and DATABASE_URL.startswith("postgresql")
        else "N/A",
        "health": check_database_health(),
    }
