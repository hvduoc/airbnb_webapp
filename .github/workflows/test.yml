name: 🧪 Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests with Server
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 💾 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🗄️ Set up test database
      run: |
        echo "Setting up SQLite test database..."
        python -c "
        from db import create_database_engine, create_tables
        engine = create_database_engine()
        create_tables(engine)
        print('✅ Test database created')
        "
        
    - name: 🚀 Start server in background
      run: |
        echo "Starting payment_production.py server..."
        python payment_production.py &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        echo "🚀 Server started with PID: $SERVER_PID"
        
        # Wait for server to be ready
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8004/health > /dev/null 2>&1; then
            echo "✅ Server is ready!"
            break
          fi
          echo "Attempt $i: Server not ready yet, waiting..."
          sleep 2
        done
        
        # Final health check
        if ! curl -s http://localhost:8004/health > /dev/null 2>&1; then
          echo "❌ Server failed to start!"
          exit 1
        fi
        
    - name: 🧪 Run tests
      run: |
        echo "Running pytest with server available..."
        pytest -v --tb=short
        
    - name: 🛑 Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          echo "Stopping server (PID: $SERVER_PID)..."
          kill $SERVER_PID || true
          echo "✅ Server stopped"
        fi
        
    - name: 📊 Test Results Summary
      if: always()
      run: |
        echo ""
        echo "🧪 TEST EXECUTION COMPLETE"
        echo "Server was running during tests on port 8004"
        echo "All integration tests should have passed with live server"