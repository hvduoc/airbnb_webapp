#!/usr/bin/env python3
"""
AIRBNB WEBAPP - Enhanced Security Services
D·ªãch v·ª• b·∫£o m·∫≠t n√¢ng cao cho Production Deployment
Bao g·ªìm: Rate Limiting, Input Validation, Security Headers, CSRF Protection
Author: AI Assistant
Created: 2024-12-28
"""

import hashlib
import logging
import re
import time
from collections import defaultdict, deque
from datetime import datetime
from typing import Any, Dict, List

from fastapi import HTTPException, Request, status
from starlette.middleware.base import BaseHTTPMiddleware

logger = logging.getLogger(__name__)

# ==================== RATE LIMITING ====================

class RateLimiter:
    """Rate Limiter v·ªõi sliding window algorithm"""
    
    def __init__(self):
        self.requests = defaultdict(deque)
        self.blocked_ips = {}  # IP -> (block_time, attempts)
    
    def is_allowed(self, identifier: str, max_requests: int, window_seconds: int, block_duration: int = 300) -> bool:
        """Ki·ªÉm tra request c√≥ ƒë∆∞·ª£c ph√©p kh√¥ng"""
        current_time = time.time()
        
        # Ki·ªÉm tra IP c√≥ b·ªã block kh√¥ng
        if identifier in self.blocked_ips:
            block_time, attempts = self.blocked_ips[identifier]
            if current_time - block_time < block_duration:
                logger.warning(f"üö´ IP {identifier} v·∫´n b·ªã block (c√≤n {block_duration - (current_time - block_time):.0f}s)")
                return False
            else:
                # H·∫øt th·ªùi gian block, reset
                del self.blocked_ips[identifier]
        
        # L√†m s·∫°ch requests c≈©
        request_times = self.requests[identifier]
        while request_times and request_times[0] <= current_time - window_seconds:
            request_times.popleft()
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng requests
        if len(request_times) >= max_requests:
            # Block IP n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n
            self.blocked_ips[identifier] = (current_time, len(request_times))
            logger.warning(f"üö´ Block IP {identifier} do v∆∞·ª£t rate limit: {len(request_times)}/{max_requests}")
            return False
        
        # Th√™m request hi·ªán t·∫°i
        request_times.append(current_time)
        return True

class RateLimitMiddleware(BaseHTTPMiddleware):
    """Middleware Rate Limiting cho FastAPI"""
    
    def __init__(self, app, rate_limiter: RateLimiter, requests_per_minute: int = 100):
        super().__init__(app)
        self.rate_limiter = rate_limiter
        self.requests_per_minute = requests_per_minute
        
        # Special limits cho c√°c endpoints nh·∫°y c·∫£m
        self.endpoint_limits = {
            "/login": (5, 300),  # 5 requests per 5 minutes
            "/register": (3, 600),  # 3 requests per 10 minutes
            "/api/upload": (10, 60),  # 10 uploads per minute
        }
    
    async def dispatch(self, request: Request, call_next):
        """X·ª≠ l√Ω rate limiting cho m·ªói request"""
        client_ip = self._get_client_ip(request)
        path = request.url.path
        
        # √Åp d·ª•ng limit ƒë·∫∑c bi·ªát cho endpoint nh·∫°y c·∫£m
        if path in self.endpoint_limits:
            max_requests, window = self.endpoint_limits[path]
            identifier = f"{client_ip}:{path}"
        else:
            max_requests, window = self.requests_per_minute, 60
            identifier = client_ip
        
        # Ki·ªÉm tra rate limit
        if not self.rate_limiter.is_allowed(identifier, max_requests, window):
            logger.warning(f"üö´ Rate limit exceeded: {client_ip} -> {path}")
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail={
                    "error": "Qu√° nhi·ªÅu requests",
                    "message": "Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t",
                    "retry_after": window
                }
            )
        
        response = await call_next(request)
        
        # Th√™m headers v·ªÅ rate limiting
        response.headers["X-RateLimit-Limit"] = str(max_requests)
        response.headers["X-RateLimit-Window"] = str(window)
        
        return response
    
    def _get_client_ip(self, request: Request) -> str:
        """L·∫•y IP th·ª±c c·ªßa client qua proxy"""
        # Ki·ªÉm tra headers t·ª´ reverse proxy
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
        
        return request.client.host

# ==================== INPUT VALIDATION ====================

class InputValidator:
    """Validator cho input security"""
    
    # Regex patterns cho validation
    PATTERNS = {
        "email": re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'),
        "phone": re.compile(r'^[\+]?[0-9]{10,15}$'),
        "username": re.compile(r'^[a-zA-Z0-9_]{3,20}$'),
        "property_code": re.compile(r'^[A-Z0-9-]{3,10}$'),
        "confirmation_code": re.compile(r'^[A-Z0-9]{6,20}$'),
    }
    
    # Danh s√°ch t·ª´ kh√≥a nguy hi·ªÉm (SQL injection, XSS)
    DANGEROUS_KEYWORDS = [
        'script', 'javascript', 'onload', 'onerror', 'alert',
        'drop table', 'delete from', 'insert into', 'update set',
        'union select', 'or 1=1', 'and 1=1', '--', '/*', '*/',
        '<script', '</script>', '<iframe', '<object', '<embed'
    ]
    
    @classmethod
    def validate_email(cls, email: str) -> bool:
        """Validate email format"""
        if not email or len(email) > 255:
            return False
        return bool(cls.PATTERNS["email"].match(email))
    
    @classmethod
    def validate_phone(cls, phone: str) -> bool:
        """Validate phone number"""
        if not phone:
            return True  # Phone is optional
        return bool(cls.PATTERNS["phone"].match(phone))
    
    @classmethod
    def validate_username(cls, username: str) -> bool:
        """Validate username format"""
        if not username:
            return False
        return bool(cls.PATTERNS["username"].match(username))
    
    @classmethod
    def validate_password(cls, password: str, min_length: int = 8) -> Dict[str, Any]:
        """Validate password strength"""
        result = {
            "valid": True,
            "errors": [],
            "strength": "weak"
        }
        
        if not password:
            result["valid"] = False
            result["errors"].append("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            return result
        
        if len(password) < min_length:
            result["valid"] = False
            result["errors"].append(f"M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t {min_length} k√Ω t·ª±")
        
        # Ki·ªÉm tra strength
        has_upper = bool(re.search(r'[A-Z]', password))
        has_lower = bool(re.search(r'[a-z]', password))
        has_digit = bool(re.search(r'\d', password))
        has_special = bool(re.search(r'[!@#$%^&*(),.?":{}|<>]', password))
        
        strength_score = sum([has_upper, has_lower, has_digit, has_special])
        
        if strength_score < 2:
            result["strength"] = "weak"
            result["errors"].append("M·∫≠t kh·∫©u qu√° y·∫øu - c·∫ßn c√≥ ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát")
        elif strength_score < 3:
            result["strength"] = "medium"
        else:
            result["strength"] = "strong"
        
        return result
    
    @classmethod
    def sanitize_input(cls, text: str) -> str:
        """Sanitize input ƒë·ªÉ tr√°nh XSS v√† SQL injection"""
        if not text:
            return ""
        
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± HTML nguy hi·ªÉm
        text = re.sub(r'<[^>]*>', '', text)
        
        # Ki·ªÉm tra c√°c t·ª´ kh√≥a nguy hi·ªÉm
        text_lower = text.lower()
        for keyword in cls.DANGEROUS_KEYWORDS:
            if keyword in text_lower:
                logger.warning(f"üö® Ph√°t hi·ªán t·ª´ kh√≥a nguy hi·ªÉm: {keyword}")
                text = text.replace(keyword, '***')
        
        return text.strip()
    
    @classmethod
    def validate_file_upload(cls, filename: str, content_type: str, allowed_extensions: List[str]) -> Dict[str, Any]:
        """Validate file upload"""
        result = {
            "valid": True,
            "errors": []
        }
        
        if not filename:
            result["valid"] = False
            result["errors"].append("T√™n file kh√¥ng h·ª£p l·ªá")
            return result
        
        # Ki·ªÉm tra extension
        file_ext = filename.split('.')[-1].lower() if '.' in filename else ''
        if file_ext not in allowed_extensions:
            result["valid"] = False
            result["errors"].append(f"File extension '{file_ext}' kh√¥ng ƒë∆∞·ª£c ph√©p. Cho ph√©p: {', '.join(allowed_extensions)}")
        
        # Ki·ªÉm tra t√™n file c√≥ k√Ω t·ª± nguy hi·ªÉm
        dangerous_chars = ['..', '/', '\\', '<', '>', '|', ':', '*', '?', '"']
        for char in dangerous_chars:
            if char in filename:
                result["valid"] = False
                result["errors"].append("T√™n file ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá")
                break
        
        return result

# ==================== SECURITY HEADERS ====================

class SecurityHeadersMiddleware(BaseHTTPMiddleware):
    """Middleware th√™m security headers"""
    
    def __init__(self, app):
        super().__init__(app)
        
        # Security headers configuration
        self.security_headers = {
            "X-Content-Type-Options": "nosniff",
            "X-Frame-Options": "DENY",
            "X-XSS-Protection": "1; mode=block",
            "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
            "Referrer-Policy": "strict-origin-when-cross-origin",
            "Permissions-Policy": "geolocation=(), microphone=(), camera=()",
            "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';",
        }
    
    async def dispatch(self, request: Request, call_next):
        """Th√™m security headers v√†o response"""
        response = await call_next(request)
        
        # Th√™m t·∫•t c·∫£ security headers
        for header, value in self.security_headers.items():
            response.headers[header] = value
        
        # Server header ƒë·ªÉ ·∫©n th√¥ng tin server
        response.headers["Server"] = "Airbnb-WebApp"
        
        return response

# ==================== CSRF PROTECTION ====================

class CSRFProtection:
    """CSRF Protection system"""
    
    def __init__(self, secret_key: str):
        self.secret_key = secret_key
        self.token_expiry = 3600  # 1 hour
    
    def generate_token(self, session_id: str) -> str:
        """T·∫°o CSRF token cho session"""
        timestamp = str(int(time.time()))
        data = f"{session_id}:{timestamp}"
        signature = hashlib.sha256(f"{data}:{self.secret_key}".encode()).hexdigest()
        token = f"{timestamp}.{signature}"
        return token
    
    def validate_token(self, token: str, session_id: str) -> bool:
        """Validate CSRF token"""
        try:
            if not token or '.' not in token:
                return False
            
            timestamp_str, signature = token.split('.', 1)
            timestamp = int(timestamp_str)
            
            # Ki·ªÉm tra expiry
            if time.time() - timestamp > self.token_expiry:
                logger.warning(f"üö® CSRF token expired: {token}")
                return False
            
            # Verify signature
            data = f"{session_id}:{timestamp_str}"
            expected_signature = hashlib.sha256(f"{data}:{self.secret_key}".encode()).hexdigest()
            
            if signature != expected_signature:
                logger.warning(f"üö® Invalid CSRF token signature: {token}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"üö® CSRF token validation error: {e}")
            return False

# ==================== PASSWORD POLICY ====================

class PasswordPolicy:
    """Password policy enforcement"""
    
    def __init__(self):
        self.min_length = 8
        self.max_length = 128
        self.require_uppercase = True
        self.require_lowercase = True
        self.require_digits = True
        self.require_special = True
        self.common_passwords = self._load_common_passwords()
    
    def _load_common_passwords(self) -> set:
        """Load danh s√°ch m·∫≠t kh·∫©u ph·ªï bi·∫øn"""
        return {
            "password", "123456", "123456789", "qwerty", "abc123",
            "password123", "admin", "letmein", "welcome", "monkey",
            "1234567890", "dragon", "master", "hello", "freedom"
        }
    
    def validate_password(self, password: str, username: str = None) -> Dict[str, Any]:
        """Comprehensive password validation"""
        result = {
            "valid": True,
            "errors": [],
            "strength_score": 0,
            "suggestions": []
        }
        
        if not password:
            result["valid"] = False
            result["errors"].append("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            return result
        
        # Length check
        if len(password) < self.min_length:
            result["valid"] = False
            result["errors"].append(f"M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t {self.min_length} k√Ω t·ª±")
        
        if len(password) > self.max_length:
            result["valid"] = False
            result["errors"].append(f"M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c d√†i qu√° {self.max_length} k√Ω t·ª±")
        
        # Character requirements
        has_upper = bool(re.search(r'[A-Z]', password))
        has_lower = bool(re.search(r'[a-z]', password))
        has_digit = bool(re.search(r'\d', password))
        has_special = bool(re.search(r'[!@#$%^&*(),.?":{}|<>]', password))
        
        if self.require_uppercase and not has_upper:
            result["valid"] = False
            result["errors"].append("M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i vi·∫øt hoa")
        
        if self.require_lowercase and not has_lower:
            result["valid"] = False
            result["errors"].append("M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i vi·∫øt th∆∞·ªùng")
        
        if self.require_digits and not has_digit:
            result["valid"] = False
            result["errors"].append("M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ s·ªë")
        
        if self.require_special and not has_special:
            result["valid"] = False
            result["errors"].append("M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#$%^&*)")
        
        # Common password check
        if password.lower() in self.common_passwords:
            result["valid"] = False
            result["errors"].append("M·∫≠t kh·∫©u n√†y qu√° ph·ªï bi·∫øn v√† kh√¥ng an to√†n")
        
        # Username similarity check
        if username and len(username) > 3 and username.lower() in password.lower():
            result["valid"] = False
            result["errors"].append("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a t√™n ƒëƒÉng nh·∫≠p")
        
        # Calculate strength score
        strength_factors = [has_upper, has_lower, has_digit, has_special]
        result["strength_score"] = sum(strength_factors) * 25  # 0-100 scale
        
        # Length bonus
        if len(password) >= 12:
            result["strength_score"] += 10
        if len(password) >= 16:
            result["strength_score"] += 10
        
        # Suggestions
        if not has_upper:
            result["suggestions"].append("Th√™m ch·ªØ c√°i vi·∫øt hoa")
        if not has_lower:
            result["suggestions"].append("Th√™m ch·ªØ c√°i vi·∫øt th∆∞·ªùng")
        if not has_digit:
            result["suggestions"].append("Th√™m ch·ªØ s·ªë")
        if not has_special:
            result["suggestions"].append("Th√™m k√Ω t·ª± ƒë·∫∑c bi·ªát")
        if len(password) < 12:
            result["suggestions"].append("TƒÉng ƒë·ªô d√†i l√™n √≠t nh·∫•t 12 k√Ω t·ª±")
        
        return result

# ==================== SECURITY AUDIT LOG ====================

class SecurityAuditLogger:
    """Security event logging system"""
    
    def __init__(self):
        self.logger = logging.getLogger("security_audit")
        
        # T·∫°o file handler ri√™ng cho security logs
        handler = logging.FileHandler("logs/security_audit.log")
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)
    
    def log_event(self, event_type: str, details: Dict[str, Any], severity: str = "INFO"):
        """Log security event"""
        {
            "event_type": event_type,
            "timestamp": datetime.utcnow().isoformat(),
            "details": details,
            "severity": severity
        }
        
        if severity == "CRITICAL":
            self.logger.critical(f"üö® {event_type}: {details}")
        elif severity == "WARNING":
            self.logger.warning(f"‚ö†Ô∏è {event_type}: {details}")
        else:
            self.logger.info(f"‚ÑπÔ∏è {event_type}: {details}")
    
    def log_failed_login(self, username: str, ip_address: str, reason: str):
        """Log failed login attempt"""
        self.log_event(
            "FAILED_LOGIN",
            {
                "username": username,
                "ip_address": ip_address,
                "reason": reason
            },
            "WARNING"
        )
    
    def log_suspicious_activity(self, activity: str, ip_address: str, details: Dict[str, Any]):
        """Log suspicious activity"""
        self.log_event(
            "SUSPICIOUS_ACTIVITY",
            {
                "activity": activity,
                "ip_address": ip_address,
                **details
            },
            "CRITICAL"
        )

# Global instances
rate_limiter = RateLimiter()
input_validator = InputValidator()
password_policy = PasswordPolicy()
security_audit_logger = SecurityAuditLogger()

# Export cho s·ª≠ d·ª•ng trong app
__all__ = [
    "RateLimiter", "RateLimitMiddleware", "InputValidator", 
    "SecurityHeadersMiddleware", "CSRFProtection", "PasswordPolicy",
    "SecurityAuditLogger", "rate_limiter", "input_validator",
    "password_policy", "security_audit_logger"
]