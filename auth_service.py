"""
D·ªãch v·ª• X√°c th·ª±c v√† Qu·∫£n l√Ω Ng∆∞·ªùi d√πng - Airbnb WebApp
X·ª≠ l√Ω ƒëƒÉng nh·∫≠p, ƒëƒÉng k√Ω, qu·∫£n l√Ω ng∆∞·ªùi d√πng v·ªõi b·∫£o m·∫≠t c·∫•p production
T√≠ch h·ª£p ho√†n to√†n v·ªõi h·ªá th·ªëng b·∫£o m·∫≠t ch√≠nh c·ªßa ·ª©ng d·ª•ng
"""

import os
import secrets
from datetime import datetime, timedelta

from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.orm import Session

from logging_config import log_security_event
from models import User  # S·ª≠ d·ª•ng models ch√≠nh c·ªßa h·ªá th·ªëng

# C·∫•u h√¨nh b·∫£o m·∫≠t t·ª´ environment - Production ready v·ªõi tƒÉng c∆∞·ªùng b·∫£o m·∫≠t
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    # T·∫°o SECRET_KEY t·ª± ƒë·ªông n·∫øu kh√¥ng c√≥ trong environment
    SECRET_KEY = secrets.token_urlsafe(64)
    print("üîê ƒê√£ t·∫°o SECRET_KEY t·ª± ƒë·ªông. H√£y l∆∞u v√†o environment variables:")
    print(f"export SECRET_KEY='{SECRET_KEY}'")

ALGORITHM = os.getenv("ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "30"))  # Gi·∫£m t·ª´ 60 xu·ªëng 30 ph√∫t
REFRESH_TOKEN_EXPIRE_DAYS = int(os.getenv("REFRESH_TOKEN_EXPIRE_DAYS", "7"))
BCRYPT_ROUNDS = int(os.getenv("BCRYPT_ROUNDS", "12"))

# C·∫•u h√¨nh b·∫£o m·∫≠t tƒÉng c∆∞·ªùng
MAX_LOGIN_ATTEMPTS = int(os.getenv("MAX_LOGIN_ATTEMPTS", "5"))
ACCOUNT_LOCKOUT_DURATION = int(os.getenv("ACCOUNT_LOCKOUT_DURATION", "300"))  # 5 ph√∫t
PASSWORD_MIN_LENGTH = int(os.getenv("PASSWORD_MIN_LENGTH", "8"))
REQUIRE_STRONG_PASSWORD = os.getenv("REQUIRE_STRONG_PASSWORD", "true").lower() == "true"

# C·∫£nh b√°o b·∫£o m·∫≠t trong development
if os.getenv("ENVIRONMENT", "development") == "development":
    print("üîß Ch·∫ø ƒë·ªô Development - B·∫£o m·∫≠t c∆° b·∫£n ƒë∆∞·ª£c k√≠ch ho·∫°t")
else:
    print("üîí Ch·∫ø ƒë·ªô Production - B·∫£o m·∫≠t cao c·∫•p ƒë∆∞·ª£c k√≠ch ho·∫°t")

# M√£ h√≥a m·∫≠t kh·∫©u v·ªõi c·∫•u h√¨nh bcrypt production chu·∫©n
pwd_context = CryptContext(
    schemes=["bcrypt"], 
    deprecated="auto",
    bcrypt__rounds=BCRYPT_ROUNDS  # C·∫•u h√¨nh rounds t·ª´ environment
)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """X√°c minh m·∫≠t kh·∫©u ng∆∞·ªùi d√πng"""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """M√£ h√≥a m·∫≠t kh·∫©u v·ªõi bcrypt"""
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    """T·∫°o JWT access token v·ªõi th√¥ng tin b·∫£o m·∫≠t ƒë·∫ßy ƒë·ªß"""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    
    # Th√™m c√°c tr∆∞·ªùng JWT chu·∫©n
    to_encode.update({
        "exp": expire,
        "iat": datetime.utcnow(),
        "jti": secrets.token_urlsafe(32),  # JWT ID ƒë·ªÉ theo d√µi
        "type": "access"  # Lo·∫°i token
    })
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def create_refresh_token(data: dict):
    """T·∫°o JWT refresh token v·ªõi th·ªùi h·∫°n d√†i h·∫°n"""
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
    
    to_encode.update({
        "exp": expire,
        "iat": datetime.utcnow(),
        "jti": secrets.token_urlsafe(32),
        "type": "refresh"  # Lo·∫°i token
    })
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def verify_token(token: str, token_type: str = "access"):
    """X√°c minh JWT token v√† tr·∫£ v·ªÅ payload"""
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        
        # Ki·ªÉm tra lo·∫°i token
        if payload.get("type") != token_type:
            return None
            
        return payload
    except JWTError:
        return None

def refresh_access_token(refresh_token: str, db: Session):
    """T·∫°o access token m·ªõi t·ª´ refresh token h·ª£p l·ªá"""
    payload = verify_token(refresh_token, "refresh")
    if not payload:
        return None
        
    username = payload.get("sub")
    if not username:
        return None
        
    # X√°c minh ng∆∞·ªùi d√πng v·∫´n t·ªìn t·∫°i v√† ƒëang ho·∫°t ƒë·ªông
    user = db.query(User).filter(User.username == username, User.is_active).first()
    if not user:
        return None
        
    # T·∫°o access token m·ªõi
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username, "role": user.role}, 
        expires_delta=access_token_expires
    )
    
    # Ghi log s·ª± ki·ªán b·∫£o m·∫≠t
    log_security_event(
        action="token_refresh",
        user_id=user.id,
        success=True,
        details={"username": user.username}
    )
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "expires_in": ACCESS_TOKEN_EXPIRE_MINUTES * 60
    }

def authenticate_user(db: Session, username: str, password: str):
    """X√°c th·ª±c ng∆∞·ªùi d√πng v·ªõi username v√† m·∫≠t kh·∫©u"""
    user = db.query(User).filter(User.username == username, User.is_active).first()
    if not user:
        return False
    if not verify_password(password, user.password_hash):
        return False
    return user

def get_current_user_from_token(token: str, db: Session):
    """L·∫•y th√¥ng tin user t·ª´ JWT access token"""
    payload = verify_token(token, "access")
    if not payload:
        return None
        
    username: str = payload.get("sub")
    if username is None:
        return None
        
    user = db.query(User).filter(User.username == username, User.is_active).first()
    return user

def login_user(db: Session, username: str, password: str):
    """Quy tr√¨nh ƒëƒÉng nh·∫≠p ho√†n ch·ªânh v·ªõi access + refresh tokens"""
    user = authenticate_user(db, username, password)
    if not user:
        # Ghi log th·∫•t b·∫°i
        log_security_event(
            action="login_failed",
            success=False,
            details={"username": username, "reason": "invalid_credentials"}
        )
        return None
        
    # C·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi
    user.last_login = datetime.utcnow()
    db.commit()
    
    # T·∫°o tokens
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username, "role": user.role}, 
        expires_delta=access_token_expires
    )
    refresh_token = create_refresh_token(
        data={"sub": user.username}
    )
    
    # Ghi log th√†nh c√¥ng
    log_security_event(
        action="login_success",
        user_id=user.id,
        success=True,
        details={"username": user.username, "role": user.role}
    )
    
    return {
        "access_token": access_token,
        "refresh_token": refresh_token,
        "token_type": "bearer",
        "expires_in": ACCESS_TOKEN_EXPIRE_MINUTES * 60,
        "user": {
            "id": user.id,
            "username": user.username,
            "full_name": user.full_name,
            "role": user.role
        }
    }

def create_user(db: Session, username: str, password: str, full_name: str, role: str, phone: str = None, email: str = None):
    """T·∫°o ng∆∞·ªùi d√πng m·ªõi trong h·ªá th·ªëng"""
    # Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
    existing_user = db.query(User).filter(User.username == username).first()
    if existing_user:
        raise ValueError(f"T√™n ƒëƒÉng nh·∫≠p '{username}' ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng")
    
    # Ki·ªÉm tra vai tr√≤ h·ª£p l·ªá
    if not validate_role(role):
        raise ValueError(f"Vai tr√≤ '{role}' kh√¥ng h·ª£p l·ªá. C√°c vai tr√≤ c√≥ s·∫µn: {', '.join(ROLES.keys())}")
    
    # T·∫°o ng∆∞·ªùi d√πng m·ªõi
    hashed_password = get_password_hash(password)
    new_user = User(
        username=username,
        password_hash=hashed_password,
        full_name=full_name,
        role=role,
        phone=phone,
        email=email,
        is_active=True,
        created_at=datetime.utcnow(),
        updated_at=datetime.utcnow()
    )
    
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    
    # Ghi log t·∫°o ng∆∞·ªùi d√πng
    log_security_event(
        action="user_created",
        user_id=new_user.id,
        success=True,
        details={"username": username, "role": role, "created_by": "system"}
    )
    
    return new_user

def get_all_users(db: Session):
    """L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng ƒëang ho·∫°t ƒë·ªông"""
    return db.query(User).filter(User.is_active).all()

def get_users_by_role(db: Session, role: str):
    """L·∫•y danh s√°ch ng∆∞·ªùi d√πng theo vai tr√≤"""
    return db.query(User).filter(User.role == role, User.is_active).all()

def update_user(db: Session, user_id: int, **kwargs):
    """C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng"""
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise ValueError("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng trong h·ªá th·ªëng")
    
    # L∆∞u th√¥ng tin c≈© ƒë·ªÉ ghi log
    old_info = {
        "username": user.username,
        "role": user.role,
        "is_active": user.is_active
    }
    
    # C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng
    for key, value in kwargs.items():
        if hasattr(user, key):
            if key == "password" and value:
                setattr(user, "password_hash", get_password_hash(value))
            elif key == "role" and value:
                if not validate_role(value):
                    raise ValueError(f"Vai tr√≤ '{value}' kh√¥ng h·ª£p l·ªá")
                setattr(user, key, value)
            else:
                setattr(user, key, value)
    
    user.updated_at = datetime.utcnow()
    db.commit()
    db.refresh(user)
    
    # Ghi log c·∫≠p nh·∫≠t
    log_security_event(
        action="user_updated",
        user_id=user.id,
        success=True,
        details={
            "updated_fields": list(kwargs.keys()),
            "old_role": old_info["role"],
            "new_role": user.role
        }
    )
    
    return user

def deactivate_user(db: Session, user_id: int):
    """V√¥ hi·ªáu h√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng"""
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise ValueError("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng trong h·ªá th·ªëng")
    
    if not user.is_active:
        raise ValueError("T√†i kho·∫£n ng∆∞·ªùi d√πng ƒë√£ b·ªã v√¥ hi·ªáu h√≥a tr∆∞·ªõc ƒë√≥")
    
    user.is_active = False
    user.updated_at = datetime.utcnow()
    db.commit()
    
    # Ghi log v√¥ hi·ªáu h√≥a
    log_security_event(
        action="user_deactivated",
        user_id=user.id,
        success=True,
        details={"username": user.username, "reason": "admin_action"}
    )
    
    return user

# C√°c vai tr√≤ h·ªá th·ªëng - Vi·ªát h√≥a ho√†n to√†n
ROLES = {
    "assistant": "Tr·ª£ l√Ω",
    "manager": "Qu·∫£n l√Ω", 
    "owner": "Ch·ªß s·ªü h·ªØu",
    "admin": "Qu·∫£n tr·ªã vi√™n",
    "user": "Ng∆∞·ªùi d√πng"
}

def get_role_display_name(role: str) -> str:
    """L·∫•y t√™n hi·ªÉn th·ªã ti·∫øng Vi·ªát c·ªßa vai tr√≤"""
    return ROLES.get(role, role)

def get_available_roles() -> dict:
    """L·∫•y danh s√°ch t·∫•t c·∫£ vai tr√≤ c√≥ s·∫µn"""
    return ROLES.copy()

def validate_role(role: str) -> bool:
    """Ki·ªÉm tra vai tr√≤ c√≥ h·ª£p l·ªá kh√¥ng"""
    return role in ROLES.keys()