# =====================================================
# LOGSTASH PIPELINE CONFIGURATION
# Airbnb WebApp - Vietnamese Log Processing Pipeline
# =====================================================

input {
  # Filebeat Input từ Application Logs
  beats {
    port => 5044
    host => "0.0.0.0"
  }
  
  # TCP Input cho Direct Log Shipping
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # File Input cho Local Development
  file {
    path => "/var/log/airbnb/*.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb"
    codec => multiline {
      pattern => "^\d{4}-\d{2}-\d{2}"
      negate => true
      what => "previous"
    }
  }
}

filter {
  # Add timestamp và processing info
  mutate {
    add_field => { 
      "[@metadata][processed_at]" => "%{+YYYY-MM-dd HH:mm:ss}"
      "[@metadata][pipeline]" => "airbnb-main"
    }
  }
  
  # Parse JSON logs từ FastAPI application
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "app"
    }
    
    # Extract Vietnamese business fields
    if [app][action] {
      mutate {
        add_field => { "business_action" => "%{[app][action]}" }
      }
    }
    
    if [app][user_role] {
      mutate {
        add_field => { "user_role" => "%{[app][user_role]}" }
      }
    }
    
    if [app][property_id] {
      mutate {
        add_field => { "property_id" => "%{[app][property_id]}" }
      }
    }
    
    if [app][booking_id] {
      mutate {
        add_field => { "booking_id" => "%{[app][booking_id]}" }
      }
    }
  }
  
  # Parse Nginx Access Logs
  if [fields][log_type] == "nginx_access" {
    grok {
      match => { 
        "message" => "%{NGINXACCESS}"
      }
    }
    
    # Parse Vietnamese địa chỉ IP geolocation
    if [clientip] {
      geoip {
        source => "clientip"
        target => "geoip"
      }
    }
    
    # Extract API endpoints
    if [request] {
      grok {
        match => { 
          "request" => "(?<method>\w+)\s+(?<endpoint>[^\s\?]+)"
        }
      }
      
      # Categorize API endpoints
      if [endpoint] =~ /^\/api\/bookings/ {
        mutate { add_field => { "api_category" => "booking_management" } }
      } else if [endpoint] =~ /^\/api\/payments/ {
        mutate { add_field => { "api_category" => "payment_processing" } }
      } else if [endpoint] =~ /^\/api\/properties/ {
        mutate { add_field => { "api_category" => "property_management" } }
      } else if [endpoint] =~ /^\/api\/expenses/ {
        mutate { add_field => { "api_category" => "expense_tracking" } }
      } else {
        mutate { add_field => { "api_category" => "general" } }
      }
    }
  }
  
  # Parse Nginx Error Logs
  if [fields][log_type] == "nginx_error" {
    grok {
      match => { 
        "message" => "%{NGINXERROR}"
      }
    }
  }
  
  # Parse PostgreSQL Logs
  if [fields][log_type] == "postgres" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+\[%{NUMBER:pid}\]\s+%{WORD:level}:\s+%{GREEDYDATA:postgres_message}"
      }
    }
    
    # Extract slow queries
    if [postgres_message] =~ /duration:/ {
      grok {
        match => { 
          "postgres_message" => "duration:\s+%{NUMBER:query_duration:float}\s+ms"
        }
      }
      
      if [query_duration] and [query_duration] > 1000 {
        mutate { add_field => { "slow_query" => "true" } }
      }
    }
  }
  
  # Parse Application Error Logs
  if [fields][log_type] == "application" and [level] == "ERROR" {
    # Extract Vietnamese error context
    if [message] =~ /(lỗi|sai|thất bại|không thể)/ {
      mutate { 
        add_field => { "error_language" => "vietnamese" }
        add_field => { "requires_vietnamese_support" => "true" }
      }
    }
    
    # Extract error categories
    if [message] =~ /(database|cơ sở dữ liệu)/ {
      mutate { add_field => { "error_category" => "database" } }
    } else if [message] =~ /(authentication|xác thực)/ {
      mutate { add_field => { "error_category" => "authentication" } }
    } else if [message] =~ /(payment|thanh toán)/ {
      mutate { add_field => { "error_category" => "payment" } }
    } else if [message] =~ /(booking|đặt phòng)/ {
      mutate { add_field => { "error_category" => "booking" } }
    }
  }
  
  # Add common fields
  mutate {
    add_field => { 
      "environment" => "production"
      "application" => "airbnb-webapp"
      "version" => "1.0.0"
    }
  }
  
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss" ]
    target => "@timestamp"
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "host", "agent", "tags" ]
  }
}

output {
  # Send all logs to Elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    
    # Create indices by log type và date
    index => "airbnb-logs-%{[fields][log_type]:application}-%{+YYYY.MM.dd}"
    
    # Document type
    document_type => "_doc"
    
    # Template settings
    template_name => "airbnb-logs"
    template_pattern => "airbnb-logs-*"
    template => {
      "index_patterns" => ["airbnb-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "5s"
        "analysis" => {
          "analyzer" => {
            "vietnamese_analyzer" => {
              "type" => "custom"
              "tokenizer" => "standard"
              "filter" => ["lowercase", "stop"]
            }
          }
        }
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "message" => { 
            "type" => "text"
            "analyzer" => "vietnamese_analyzer"
          }
          "business_action" => { "type" => "keyword" }
          "user_role" => { "type" => "keyword" }
          "property_id" => { "type" => "keyword" }
          "booking_id" => { "type" => "keyword" }
          "api_category" => { "type" => "keyword" }
          "error_category" => { "type" => "keyword" }
          "query_duration" => { "type" => "float" }
          "clientip" => { "type" => "ip" }
          "geoip" => {
            "properties" => {
              "location" => { "type" => "geo_point" }
              "country_name" => { "type" => "keyword" }
              "city_name" => { "type" => "keyword" }
            }
          }
        }
      }
    }
  }
  
  # Debug output cho development
  if [@metadata][debug] {
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  }
  
  # Dead letter queue cho failed documents
  if "_failure" in [tags] {
    file {
      path => "/usr/share/logstash/data/failed_docs.log"
      codec => json_lines
    }
  }
}